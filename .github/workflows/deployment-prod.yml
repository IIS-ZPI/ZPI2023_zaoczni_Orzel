name: Build and deploy to production environment

on:
  push:
    branches:
      - main

jobs:
  determine-version:
    name: Determine Release Version
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.NEW_VERSION }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Determine Release Version
        id: version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "2.0.0")
          MAJOR=$(echo $LATEST_TAG | cut -d. -f1)
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "::set-output name=NEW_VERSION::$NEW_VERSION"
          echo "Next release version: $NEW_VERSION"

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r backend/requirements.txt

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Build frontend
        env:
          DEPLOY_BASE: "/ZPI2024_zaoczni_Orzel/"
          VITE_BASE_URL: "https://zpi2024-zaoczni-orzel-1.onrender.com"
        run: |
          cd frontend
          npm install
          npm run build

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  deploy-backend:
    name: Deploy Backend to Render
    needs: build-backend
    runs-on: ubuntu-latest

    steps:
      - name: Trigger backend deployment
        run: |
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X POST \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
          -H "Content-Type: application/json" \
              -d '{}' \
              https://api.render.com/v1/services/${{ secrets.RENDER_PROD_ID }}/deploys)

          if [[ $RESPONSE -ne 201 ]]; then
            echo "Backend deployment failed with status $RESPONSE"
            exit 1
          fi

  deploy-frontend:
    name: Deploy Frontend to GitHub Pages
    needs: [build-frontend]
    runs-on: ubuntu-latest

    steps:
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
          destination_dir: .

  create-release:
    name: Create GitHub Release
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create Git Tag
        run: |
          git tag "${{ needs.determine-version.outputs.new_version }}"
          git push origin "${{ needs.determine-version.outputs.new_version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ needs.determine-version.outputs.new_version }}"
          name: "Release ${{ needs.determine-version.outputs.new_version }}"
          body: "ðŸš€ New Release: ${{ needs.determine-version.outputs.new_version }}\n"
          draft: false
          prerelease: false
